package com.bfs.level.kth.distance;

public class FindNodeAtKthDistanceAtAnyDirectionFromGivenNode {

	static class Node {
		int data;
		Node left;
		Node right;

		Node(int data) {
			this.data = data;
		}
	}

	public static int kthNodeFromGivenNode_Recursive(Node root, Node targetNode, int k) {

		if (root == null || targetNode == null || k < 0) {
			return -1;
		}
		int kthNodeFromGivenNode = kthNodeFromGivenNode(root, targetNode, k);

		return kthNodeFromGivenNode;
	}

	public static int kthNodeFromGivenNode(Node root, Node targetNode, int k) {

		if (root == null) {
			return -1;
		}

		// downward direction search, consider targetNode as root node
		if (root == targetNode) { // node found, consider find node at kth distance from root
			nodeAtKthDistanceFromParent(root, k);
			return 0;
		}

		int leftDist = kthNodeFromGivenNode(root.left, targetNode, k);

		// this is left upward direction search
		if (leftDist != -1) { // node found (means -1 = not found)
			if (leftDist + 1 == k) {
				System.out.print(root.data + " ");
			} else {
				// why k-2, 1st 1 for left and 2nd for right move
				nodeAtKthDistanceFromParent(root.right, k - 2 - leftDist);
			}

			return leftDist + 1;
		}

		int rightDist = kthNodeFromGivenNode(root.right, targetNode, k);

		// this is right upward direction search
		if (rightDist != -1) { // node found
			if (rightDist + 1 == k) {
				System.out.print(root.data + " ");
			} else {
				// why k-2, one 1 for left and 2 for right move
				nodeAtKthDistanceFromParent(root.left, k - 2 - rightDist);
			}

			return rightDist + 1;
		}

		return -1;
	}

	// same as find node at kth distance from root
	private static void nodeAtKthDistanceFromParent(Node root, int k) {
		if (root == null) {
			return;
		}
		if (k == 0) {
			System.out.print(root.data + " ");
		}
		nodeAtKthDistanceFromParent(root.left, k - 1);
		nodeAtKthDistanceFromParent(root.right, k - 1);
		return;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
