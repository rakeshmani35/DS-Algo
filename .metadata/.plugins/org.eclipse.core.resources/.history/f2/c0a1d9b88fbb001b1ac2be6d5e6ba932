package com.array.pairs;

import java.util.HashMap;
import java.util.Map;

// Given two unsorted arrays, find all pairs whose sum is x

//https://www.geeksforgeeks.org/given-two-unsorted-arrays-find-pairs-whose-sum-x/
//https://www.techiedelight.com/find-pair-with-given-sum-array/

public class FindPairsOfSumIsXOfTwoUnsortedArray {

	// Time Complexity : O(n^2) Auxiliary Space : O(1): Brute Force Approach
	public static void findPairs(int arr1[], int arr2[], int sum) {
		for (int i = 0; i < arr1.length; i++) {
			for (int j = 0; j < arr2.length; j++) {

				if (arr1[i] + arr2[j] == sum) {
					System.out.println(arr1[i] + ", " + arr2[j]);
				}
			}
		}
	}

	// Time Complexity: O(max(n, m)) Auxiliary Space: O(n)
	public static void findPairs_Map(int arr1[], int arr2[], int sum) {

		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < arr1.length; i++) {
			map.put(arr1[i], 0);
		}

		for (int i = 0; i < arr2.length; i++) {
			if (map.containsKey(sum - arr2[i])) {
				System.out.println((sum - arr2[i]) + ", " + arr2[i]);
			}
		}
	}
	
	// Time Complexity: O(max(n, m)) Auxiliary Space: O(n)
		public static void findPairs_MapWithoutDuulicate(int arr1[], int arr2[], int sum) {

			Map<Integer, Integer> map = new HashMap<Integer, Integer>();
			for (int i = 0; i < arr1.length; i++) {
				map.put(arr1[i], 0);
			}

			for (int i = 0; i < arr2.length; i++) {
				if (map.containsKey(sum - arr2[i])) {
					System.out.println((sum - arr2[i]) + ", " + arr2[i]);
				}
			}
		}
	

	public static void main(String[] args) {
		int arr1[] = { 1, 2, 3, 7, 5, 4 };
		int arr2[] = { 0, 7, 4, 3, 2, 1 };

		int sum = 8;
		findPairs(arr1, arr2, sum);

		System.out.println("-----------");
		System.out.println();
		findPairs_Map(arr1, arr2, sum);
	}

}
